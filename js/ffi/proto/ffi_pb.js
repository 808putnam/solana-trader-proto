// source: ffi.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var api_pb = require('./api_pb.js');
goog.object.extend(proto, api_pb);
goog.exportSymbol('proto.ffi.JupiterAmm', null, global);
goog.exportSymbol('proto.ffi.JupiterComputeRoutesRequest', null, global);
goog.exportSymbol('proto.ffi.JupiterComputeRoutesResponse', null, global);
goog.exportSymbol('proto.ffi.JupiterIsReadyRequest', null, global);
goog.exportSymbol('proto.ffi.JupiterIsReadyResponse', null, global);
goog.exportSymbol('proto.ffi.JupiterMarketInfo', null, global);
goog.exportSymbol('proto.ffi.JupiterPairToAccountsRequest', null, global);
goog.exportSymbol('proto.ffi.JupiterPairToAccountsResponse', null, global);
goog.exportSymbol('proto.ffi.JupiterRouteInfo', null, global);
goog.exportSymbol('proto.ffi.JupiterSwapMode', null, global);
goog.exportSymbol('proto.ffi.JupiterSwapTxRequest', null, global);
goog.exportSymbol('proto.ffi.JupiterSwapTxResponse', null, global);
goog.exportSymbol('proto.ffi.SolanaAccount', null, global);
goog.exportSymbol('proto.ffi.SolanaAccountsRequest', null, global);
goog.exportSymbol('proto.ffi.SolanaAccountsResponse', null, global);
goog.exportSymbol('proto.ffi.TransactionMessage', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffi.SolanaAccountsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ffi.SolanaAccountsRequest.repeatedFields_, null);
};
goog.inherits(proto.ffi.SolanaAccountsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffi.SolanaAccountsRequest.displayName = 'proto.ffi.SolanaAccountsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffi.SolanaAccountsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ffi.SolanaAccountsResponse.repeatedFields_, null);
};
goog.inherits(proto.ffi.SolanaAccountsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffi.SolanaAccountsResponse.displayName = 'proto.ffi.SolanaAccountsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffi.SolanaAccount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffi.SolanaAccount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffi.SolanaAccount.displayName = 'proto.ffi.SolanaAccount';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffi.JupiterPairToAccountsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffi.JupiterPairToAccountsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffi.JupiterPairToAccountsRequest.displayName = 'proto.ffi.JupiterPairToAccountsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffi.JupiterPairToAccountsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ffi.JupiterPairToAccountsResponse.repeatedFields_, null);
};
goog.inherits(proto.ffi.JupiterPairToAccountsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffi.JupiterPairToAccountsResponse.displayName = 'proto.ffi.JupiterPairToAccountsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffi.JupiterIsReadyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffi.JupiterIsReadyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffi.JupiterIsReadyRequest.displayName = 'proto.ffi.JupiterIsReadyRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffi.JupiterIsReadyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ffi.JupiterIsReadyResponse.repeatedFields_, null);
};
goog.inherits(proto.ffi.JupiterIsReadyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffi.JupiterIsReadyResponse.displayName = 'proto.ffi.JupiterIsReadyResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffi.JupiterComputeRoutesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffi.JupiterComputeRoutesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffi.JupiterComputeRoutesRequest.displayName = 'proto.ffi.JupiterComputeRoutesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffi.JupiterComputeRoutesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ffi.JupiterComputeRoutesResponse.repeatedFields_, null);
};
goog.inherits(proto.ffi.JupiterComputeRoutesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffi.JupiterComputeRoutesResponse.displayName = 'proto.ffi.JupiterComputeRoutesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffi.JupiterSwapTxRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ffi.JupiterSwapTxRequest.repeatedFields_, null);
};
goog.inherits(proto.ffi.JupiterSwapTxRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffi.JupiterSwapTxRequest.displayName = 'proto.ffi.JupiterSwapTxRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffi.JupiterSwapTxResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ffi.JupiterSwapTxResponse.repeatedFields_, null);
};
goog.inherits(proto.ffi.JupiterSwapTxResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffi.JupiterSwapTxResponse.displayName = 'proto.ffi.JupiterSwapTxResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffi.TransactionMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffi.TransactionMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffi.TransactionMessage.displayName = 'proto.ffi.TransactionMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffi.JupiterRouteInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ffi.JupiterRouteInfo.repeatedFields_, null);
};
goog.inherits(proto.ffi.JupiterRouteInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffi.JupiterRouteInfo.displayName = 'proto.ffi.JupiterRouteInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffi.JupiterMarketInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffi.JupiterMarketInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffi.JupiterMarketInfo.displayName = 'proto.ffi.JupiterMarketInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffi.JupiterAmm = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffi.JupiterAmm, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffi.JupiterAmm.displayName = 'proto.ffi.JupiterAmm';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ffi.SolanaAccountsRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffi.SolanaAccountsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ffi.SolanaAccountsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffi.SolanaAccountsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffi.SolanaAccountsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountpksList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffi.SolanaAccountsRequest}
 */
proto.ffi.SolanaAccountsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffi.SolanaAccountsRequest;
  return proto.ffi.SolanaAccountsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffi.SolanaAccountsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffi.SolanaAccountsRequest}
 */
proto.ffi.SolanaAccountsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addAccountpks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffi.SolanaAccountsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffi.SolanaAccountsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffi.SolanaAccountsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffi.SolanaAccountsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountpksList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string accountPks = 1;
 * @return {!Array<string>}
 */
proto.ffi.SolanaAccountsRequest.prototype.getAccountpksList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ffi.SolanaAccountsRequest} returns this
 */
proto.ffi.SolanaAccountsRequest.prototype.setAccountpksList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ffi.SolanaAccountsRequest} returns this
 */
proto.ffi.SolanaAccountsRequest.prototype.addAccountpks = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ffi.SolanaAccountsRequest} returns this
 */
proto.ffi.SolanaAccountsRequest.prototype.clearAccountpksList = function() {
  return this.setAccountpksList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ffi.SolanaAccountsResponse.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffi.SolanaAccountsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ffi.SolanaAccountsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffi.SolanaAccountsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffi.SolanaAccountsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountsList: jspb.Message.toObjectList(msg.getAccountsList(),
    proto.ffi.SolanaAccount.toObject, includeInstance),
    accountpksList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    error: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffi.SolanaAccountsResponse}
 */
proto.ffi.SolanaAccountsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffi.SolanaAccountsResponse;
  return proto.ffi.SolanaAccountsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffi.SolanaAccountsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffi.SolanaAccountsResponse}
 */
proto.ffi.SolanaAccountsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ffi.SolanaAccount;
      reader.readMessage(value,proto.ffi.SolanaAccount.deserializeBinaryFromReader);
      msg.addAccounts(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addAccountpks(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffi.SolanaAccountsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffi.SolanaAccountsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffi.SolanaAccountsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffi.SolanaAccountsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ffi.SolanaAccount.serializeBinaryToWriter
    );
  }
  f = message.getAccountpksList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * repeated SolanaAccount accounts = 1;
 * @return {!Array<!proto.ffi.SolanaAccount>}
 */
proto.ffi.SolanaAccountsResponse.prototype.getAccountsList = function() {
  return /** @type{!Array<!proto.ffi.SolanaAccount>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ffi.SolanaAccount, 1));
};


/**
 * @param {!Array<!proto.ffi.SolanaAccount>} value
 * @return {!proto.ffi.SolanaAccountsResponse} returns this
*/
proto.ffi.SolanaAccountsResponse.prototype.setAccountsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ffi.SolanaAccount=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ffi.SolanaAccount}
 */
proto.ffi.SolanaAccountsResponse.prototype.addAccounts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ffi.SolanaAccount, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ffi.SolanaAccountsResponse} returns this
 */
proto.ffi.SolanaAccountsResponse.prototype.clearAccountsList = function() {
  return this.setAccountsList([]);
};


/**
 * repeated string accountPks = 2;
 * @return {!Array<string>}
 */
proto.ffi.SolanaAccountsResponse.prototype.getAccountpksList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ffi.SolanaAccountsResponse} returns this
 */
proto.ffi.SolanaAccountsResponse.prototype.setAccountpksList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ffi.SolanaAccountsResponse} returns this
 */
proto.ffi.SolanaAccountsResponse.prototype.addAccountpks = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ffi.SolanaAccountsResponse} returns this
 */
proto.ffi.SolanaAccountsResponse.prototype.clearAccountpksList = function() {
  return this.setAccountpksList([]);
};


/**
 * optional string error = 3;
 * @return {string}
 */
proto.ffi.SolanaAccountsResponse.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffi.SolanaAccountsResponse} returns this
 */
proto.ffi.SolanaAccountsResponse.prototype.setError = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffi.SolanaAccount.prototype.toObject = function(opt_includeInstance) {
  return proto.ffi.SolanaAccount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffi.SolanaAccount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffi.SolanaAccount.toObject = function(includeInstance, msg) {
  var f, obj = {
    lamports: jspb.Message.getFieldWithDefault(msg, 1, 0),
    owner: msg.getOwner_asB64(),
    data: jspb.Message.getFieldWithDefault(msg, 3, ""),
    executable: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    rentepoch: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffi.SolanaAccount}
 */
proto.ffi.SolanaAccount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffi.SolanaAccount;
  return proto.ffi.SolanaAccount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffi.SolanaAccount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffi.SolanaAccount}
 */
proto.ffi.SolanaAccount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLamports(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOwner(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExecutable(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRentepoch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffi.SolanaAccount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffi.SolanaAccount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffi.SolanaAccount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffi.SolanaAccount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLamports();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getOwner_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getExecutable();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getRentepoch();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional uint64 lamports = 1;
 * @return {number}
 */
proto.ffi.SolanaAccount.prototype.getLamports = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ffi.SolanaAccount} returns this
 */
proto.ffi.SolanaAccount.prototype.setLamports = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes owner = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ffi.SolanaAccount.prototype.getOwner = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes owner = 2;
 * This is a type-conversion wrapper around `getOwner()`
 * @return {string}
 */
proto.ffi.SolanaAccount.prototype.getOwner_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOwner()));
};


/**
 * optional bytes owner = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOwner()`
 * @return {!Uint8Array}
 */
proto.ffi.SolanaAccount.prototype.getOwner_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOwner()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ffi.SolanaAccount} returns this
 */
proto.ffi.SolanaAccount.prototype.setOwner = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string data = 3;
 * @return {string}
 */
proto.ffi.SolanaAccount.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffi.SolanaAccount} returns this
 */
proto.ffi.SolanaAccount.prototype.setData = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool executable = 4;
 * @return {boolean}
 */
proto.ffi.SolanaAccount.prototype.getExecutable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ffi.SolanaAccount} returns this
 */
proto.ffi.SolanaAccount.prototype.setExecutable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional uint64 rentEpoch = 5;
 * @return {number}
 */
proto.ffi.SolanaAccount.prototype.getRentepoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ffi.SolanaAccount} returns this
 */
proto.ffi.SolanaAccount.prototype.setRentepoch = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffi.JupiterPairToAccountsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ffi.JupiterPairToAccountsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffi.JupiterPairToAccountsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffi.JupiterPairToAccountsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    inputmint: jspb.Message.getFieldWithDefault(msg, 1, ""),
    outputmint: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffi.JupiterPairToAccountsRequest}
 */
proto.ffi.JupiterPairToAccountsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffi.JupiterPairToAccountsRequest;
  return proto.ffi.JupiterPairToAccountsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffi.JupiterPairToAccountsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffi.JupiterPairToAccountsRequest}
 */
proto.ffi.JupiterPairToAccountsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInputmint(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutputmint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffi.JupiterPairToAccountsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffi.JupiterPairToAccountsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffi.JupiterPairToAccountsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffi.JupiterPairToAccountsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInputmint();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOutputmint();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string inputMint = 1;
 * @return {string}
 */
proto.ffi.JupiterPairToAccountsRequest.prototype.getInputmint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffi.JupiterPairToAccountsRequest} returns this
 */
proto.ffi.JupiterPairToAccountsRequest.prototype.setInputmint = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string outputMint = 2;
 * @return {string}
 */
proto.ffi.JupiterPairToAccountsRequest.prototype.getOutputmint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffi.JupiterPairToAccountsRequest} returns this
 */
proto.ffi.JupiterPairToAccountsRequest.prototype.setOutputmint = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ffi.JupiterPairToAccountsResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffi.JupiterPairToAccountsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ffi.JupiterPairToAccountsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffi.JupiterPairToAccountsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffi.JupiterPairToAccountsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountpksList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffi.JupiterPairToAccountsResponse}
 */
proto.ffi.JupiterPairToAccountsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffi.JupiterPairToAccountsResponse;
  return proto.ffi.JupiterPairToAccountsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffi.JupiterPairToAccountsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffi.JupiterPairToAccountsResponse}
 */
proto.ffi.JupiterPairToAccountsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addAccountpks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffi.JupiterPairToAccountsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffi.JupiterPairToAccountsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffi.JupiterPairToAccountsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffi.JupiterPairToAccountsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountpksList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * repeated string accountPks = 2;
 * @return {!Array<string>}
 */
proto.ffi.JupiterPairToAccountsResponse.prototype.getAccountpksList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ffi.JupiterPairToAccountsResponse} returns this
 */
proto.ffi.JupiterPairToAccountsResponse.prototype.setAccountpksList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ffi.JupiterPairToAccountsResponse} returns this
 */
proto.ffi.JupiterPairToAccountsResponse.prototype.addAccountpks = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ffi.JupiterPairToAccountsResponse} returns this
 */
proto.ffi.JupiterPairToAccountsResponse.prototype.clearAccountpksList = function() {
  return this.setAccountpksList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffi.JupiterIsReadyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ffi.JupiterIsReadyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffi.JupiterIsReadyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffi.JupiterIsReadyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffi.JupiterIsReadyRequest}
 */
proto.ffi.JupiterIsReadyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffi.JupiterIsReadyRequest;
  return proto.ffi.JupiterIsReadyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffi.JupiterIsReadyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffi.JupiterIsReadyRequest}
 */
proto.ffi.JupiterIsReadyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffi.JupiterIsReadyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffi.JupiterIsReadyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffi.JupiterIsReadyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffi.JupiterIsReadyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ffi.JupiterIsReadyResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffi.JupiterIsReadyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ffi.JupiterIsReadyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffi.JupiterIsReadyResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffi.JupiterIsReadyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ready: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    accountpksList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffi.JupiterIsReadyResponse}
 */
proto.ffi.JupiterIsReadyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffi.JupiterIsReadyResponse;
  return proto.ffi.JupiterIsReadyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffi.JupiterIsReadyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffi.JupiterIsReadyResponse}
 */
proto.ffi.JupiterIsReadyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReady(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addAccountpks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffi.JupiterIsReadyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffi.JupiterIsReadyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffi.JupiterIsReadyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffi.JupiterIsReadyResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReady();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getAccountpksList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional bool ready = 1;
 * @return {boolean}
 */
proto.ffi.JupiterIsReadyResponse.prototype.getReady = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ffi.JupiterIsReadyResponse} returns this
 */
proto.ffi.JupiterIsReadyResponse.prototype.setReady = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * repeated string accountPks = 2;
 * @return {!Array<string>}
 */
proto.ffi.JupiterIsReadyResponse.prototype.getAccountpksList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ffi.JupiterIsReadyResponse} returns this
 */
proto.ffi.JupiterIsReadyResponse.prototype.setAccountpksList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ffi.JupiterIsReadyResponse} returns this
 */
proto.ffi.JupiterIsReadyResponse.prototype.addAccountpks = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ffi.JupiterIsReadyResponse} returns this
 */
proto.ffi.JupiterIsReadyResponse.prototype.clearAccountpksList = function() {
  return this.setAccountpksList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffi.JupiterComputeRoutesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ffi.JupiterComputeRoutesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffi.JupiterComputeRoutesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffi.JupiterComputeRoutesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    inputmint: jspb.Message.getFieldWithDefault(msg, 1, ""),
    outputmint: jspb.Message.getFieldWithDefault(msg, 2, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    slippage: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffi.JupiterComputeRoutesRequest}
 */
proto.ffi.JupiterComputeRoutesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffi.JupiterComputeRoutesRequest;
  return proto.ffi.JupiterComputeRoutesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffi.JupiterComputeRoutesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffi.JupiterComputeRoutesRequest}
 */
proto.ffi.JupiterComputeRoutesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInputmint(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutputmint(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSlippage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffi.JupiterComputeRoutesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffi.JupiterComputeRoutesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffi.JupiterComputeRoutesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffi.JupiterComputeRoutesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInputmint();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOutputmint();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getSlippage();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional string inputMint = 1;
 * @return {string}
 */
proto.ffi.JupiterComputeRoutesRequest.prototype.getInputmint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffi.JupiterComputeRoutesRequest} returns this
 */
proto.ffi.JupiterComputeRoutesRequest.prototype.setInputmint = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string outputMint = 2;
 * @return {string}
 */
proto.ffi.JupiterComputeRoutesRequest.prototype.getOutputmint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffi.JupiterComputeRoutesRequest} returns this
 */
proto.ffi.JupiterComputeRoutesRequest.prototype.setOutputmint = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 amount = 3;
 * @return {number}
 */
proto.ffi.JupiterComputeRoutesRequest.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ffi.JupiterComputeRoutesRequest} returns this
 */
proto.ffi.JupiterComputeRoutesRequest.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional double slippage = 4;
 * @return {number}
 */
proto.ffi.JupiterComputeRoutesRequest.prototype.getSlippage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ffi.JupiterComputeRoutesRequest} returns this
 */
proto.ffi.JupiterComputeRoutesRequest.prototype.setSlippage = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ffi.JupiterComputeRoutesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffi.JupiterComputeRoutesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ffi.JupiterComputeRoutesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffi.JupiterComputeRoutesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffi.JupiterComputeRoutesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    routeinfosList: jspb.Message.toObjectList(msg.getRouteinfosList(),
    proto.ffi.JupiterRouteInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffi.JupiterComputeRoutesResponse}
 */
proto.ffi.JupiterComputeRoutesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffi.JupiterComputeRoutesResponse;
  return proto.ffi.JupiterComputeRoutesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffi.JupiterComputeRoutesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffi.JupiterComputeRoutesResponse}
 */
proto.ffi.JupiterComputeRoutesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ffi.JupiterRouteInfo;
      reader.readMessage(value,proto.ffi.JupiterRouteInfo.deserializeBinaryFromReader);
      msg.addRouteinfos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffi.JupiterComputeRoutesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffi.JupiterComputeRoutesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffi.JupiterComputeRoutesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffi.JupiterComputeRoutesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRouteinfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ffi.JupiterRouteInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated JupiterRouteInfo routeInfos = 1;
 * @return {!Array<!proto.ffi.JupiterRouteInfo>}
 */
proto.ffi.JupiterComputeRoutesResponse.prototype.getRouteinfosList = function() {
  return /** @type{!Array<!proto.ffi.JupiterRouteInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ffi.JupiterRouteInfo, 1));
};


/**
 * @param {!Array<!proto.ffi.JupiterRouteInfo>} value
 * @return {!proto.ffi.JupiterComputeRoutesResponse} returns this
*/
proto.ffi.JupiterComputeRoutesResponse.prototype.setRouteinfosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ffi.JupiterRouteInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ffi.JupiterRouteInfo}
 */
proto.ffi.JupiterComputeRoutesResponse.prototype.addRouteinfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ffi.JupiterRouteInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ffi.JupiterComputeRoutesResponse} returns this
 */
proto.ffi.JupiterComputeRoutesResponse.prototype.clearRouteinfosList = function() {
  return this.setRouteinfosList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ffi.JupiterSwapTxRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffi.JupiterSwapTxRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ffi.JupiterSwapTxRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffi.JupiterSwapTxRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffi.JupiterSwapTxRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    stepsList: jspb.Message.toObjectList(msg.getStepsList(),
    proto.ffi.JupiterMarketInfo.toObject, includeInstance),
    inamount: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    outamount: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    amount: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    otheramountthreshold: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    swapmode: jspb.Message.getFieldWithDefault(msg, 6, 0),
    priceimpactpercent: (f = msg.getPriceimpactpercent()) && api_pb.PriceImpactPercent.toObject(includeInstance, f),
    userpublickey: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffi.JupiterSwapTxRequest}
 */
proto.ffi.JupiterSwapTxRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffi.JupiterSwapTxRequest;
  return proto.ffi.JupiterSwapTxRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffi.JupiterSwapTxRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffi.JupiterSwapTxRequest}
 */
proto.ffi.JupiterSwapTxRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ffi.JupiterMarketInfo;
      reader.readMessage(value,proto.ffi.JupiterMarketInfo.deserializeBinaryFromReader);
      msg.addSteps(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setInamount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOutamount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAmount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOtheramountthreshold(value);
      break;
    case 6:
      var value = /** @type {!proto.ffi.JupiterSwapMode} */ (reader.readEnum());
      msg.setSwapmode(value);
      break;
    case 7:
      var value = new api_pb.PriceImpactPercent;
      reader.readMessage(value,api_pb.PriceImpactPercent.deserializeBinaryFromReader);
      msg.setPriceimpactpercent(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserpublickey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffi.JupiterSwapTxRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffi.JupiterSwapTxRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffi.JupiterSwapTxRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffi.JupiterSwapTxRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStepsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ffi.JupiterMarketInfo.serializeBinaryToWriter
    );
  }
  f = message.getInamount();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getOutamount();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getOtheramountthreshold();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getSwapmode();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getPriceimpactpercent();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      api_pb.PriceImpactPercent.serializeBinaryToWriter
    );
  }
  f = message.getUserpublickey();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * repeated JupiterMarketInfo steps = 1;
 * @return {!Array<!proto.ffi.JupiterMarketInfo>}
 */
proto.ffi.JupiterSwapTxRequest.prototype.getStepsList = function() {
  return /** @type{!Array<!proto.ffi.JupiterMarketInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ffi.JupiterMarketInfo, 1));
};


/**
 * @param {!Array<!proto.ffi.JupiterMarketInfo>} value
 * @return {!proto.ffi.JupiterSwapTxRequest} returns this
*/
proto.ffi.JupiterSwapTxRequest.prototype.setStepsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ffi.JupiterMarketInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ffi.JupiterMarketInfo}
 */
proto.ffi.JupiterSwapTxRequest.prototype.addSteps = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ffi.JupiterMarketInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ffi.JupiterSwapTxRequest} returns this
 */
proto.ffi.JupiterSwapTxRequest.prototype.clearStepsList = function() {
  return this.setStepsList([]);
};


/**
 * optional float inAmount = 2;
 * @return {number}
 */
proto.ffi.JupiterSwapTxRequest.prototype.getInamount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ffi.JupiterSwapTxRequest} returns this
 */
proto.ffi.JupiterSwapTxRequest.prototype.setInamount = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float outAmount = 3;
 * @return {number}
 */
proto.ffi.JupiterSwapTxRequest.prototype.getOutamount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ffi.JupiterSwapTxRequest} returns this
 */
proto.ffi.JupiterSwapTxRequest.prototype.setOutamount = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float amount = 4;
 * @return {number}
 */
proto.ffi.JupiterSwapTxRequest.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ffi.JupiterSwapTxRequest} returns this
 */
proto.ffi.JupiterSwapTxRequest.prototype.setAmount = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float otherAmountThreshold = 5;
 * @return {number}
 */
proto.ffi.JupiterSwapTxRequest.prototype.getOtheramountthreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ffi.JupiterSwapTxRequest} returns this
 */
proto.ffi.JupiterSwapTxRequest.prototype.setOtheramountthreshold = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional JupiterSwapMode swapMode = 6;
 * @return {!proto.ffi.JupiterSwapMode}
 */
proto.ffi.JupiterSwapTxRequest.prototype.getSwapmode = function() {
  return /** @type {!proto.ffi.JupiterSwapMode} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.ffi.JupiterSwapMode} value
 * @return {!proto.ffi.JupiterSwapTxRequest} returns this
 */
proto.ffi.JupiterSwapTxRequest.prototype.setSwapmode = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional api.PriceImpactPercent priceImpactPercent = 7;
 * @return {?proto.api.PriceImpactPercent}
 */
proto.ffi.JupiterSwapTxRequest.prototype.getPriceimpactpercent = function() {
  return /** @type{?proto.api.PriceImpactPercent} */ (
    jspb.Message.getWrapperField(this, api_pb.PriceImpactPercent, 7));
};


/**
 * @param {?proto.api.PriceImpactPercent|undefined} value
 * @return {!proto.ffi.JupiterSwapTxRequest} returns this
*/
proto.ffi.JupiterSwapTxRequest.prototype.setPriceimpactpercent = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ffi.JupiterSwapTxRequest} returns this
 */
proto.ffi.JupiterSwapTxRequest.prototype.clearPriceimpactpercent = function() {
  return this.setPriceimpactpercent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ffi.JupiterSwapTxRequest.prototype.hasPriceimpactpercent = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string userPublicKey = 8;
 * @return {string}
 */
proto.ffi.JupiterSwapTxRequest.prototype.getUserpublickey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffi.JupiterSwapTxRequest} returns this
 */
proto.ffi.JupiterSwapTxRequest.prototype.setUserpublickey = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ffi.JupiterSwapTxResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffi.JupiterSwapTxResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ffi.JupiterSwapTxResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffi.JupiterSwapTxResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffi.JupiterSwapTxResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionsList: jspb.Message.toObjectList(msg.getTransactionsList(),
    proto.ffi.TransactionMessage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffi.JupiterSwapTxResponse}
 */
proto.ffi.JupiterSwapTxResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffi.JupiterSwapTxResponse;
  return proto.ffi.JupiterSwapTxResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffi.JupiterSwapTxResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffi.JupiterSwapTxResponse}
 */
proto.ffi.JupiterSwapTxResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ffi.TransactionMessage;
      reader.readMessage(value,proto.ffi.TransactionMessage.deserializeBinaryFromReader);
      msg.addTransactions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffi.JupiterSwapTxResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffi.JupiterSwapTxResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffi.JupiterSwapTxResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffi.JupiterSwapTxResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ffi.TransactionMessage.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TransactionMessage transactions = 1;
 * @return {!Array<!proto.ffi.TransactionMessage>}
 */
proto.ffi.JupiterSwapTxResponse.prototype.getTransactionsList = function() {
  return /** @type{!Array<!proto.ffi.TransactionMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ffi.TransactionMessage, 1));
};


/**
 * @param {!Array<!proto.ffi.TransactionMessage>} value
 * @return {!proto.ffi.JupiterSwapTxResponse} returns this
*/
proto.ffi.JupiterSwapTxResponse.prototype.setTransactionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ffi.TransactionMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ffi.TransactionMessage}
 */
proto.ffi.JupiterSwapTxResponse.prototype.addTransactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ffi.TransactionMessage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ffi.JupiterSwapTxResponse} returns this
 */
proto.ffi.JupiterSwapTxResponse.prototype.clearTransactionsList = function() {
  return this.setTransactionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffi.TransactionMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.ffi.TransactionMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffi.TransactionMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffi.TransactionMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    content: msg.getContent_asB64(),
    iscleanup: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffi.TransactionMessage}
 */
proto.ffi.TransactionMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffi.TransactionMessage;
  return proto.ffi.TransactionMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffi.TransactionMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffi.TransactionMessage}
 */
proto.ffi.TransactionMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContent(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIscleanup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffi.TransactionMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffi.TransactionMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffi.TransactionMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffi.TransactionMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContent_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getIscleanup();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional bytes content = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ffi.TransactionMessage.prototype.getContent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes content = 1;
 * This is a type-conversion wrapper around `getContent()`
 * @return {string}
 */
proto.ffi.TransactionMessage.prototype.getContent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContent()));
};


/**
 * optional bytes content = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContent()`
 * @return {!Uint8Array}
 */
proto.ffi.TransactionMessage.prototype.getContent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContent()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ffi.TransactionMessage} returns this
 */
proto.ffi.TransactionMessage.prototype.setContent = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bool isCleanup = 2;
 * @return {boolean}
 */
proto.ffi.TransactionMessage.prototype.getIscleanup = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ffi.TransactionMessage} returns this
 */
proto.ffi.TransactionMessage.prototype.setIscleanup = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ffi.JupiterRouteInfo.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffi.JupiterRouteInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ffi.JupiterRouteInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffi.JupiterRouteInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffi.JupiterRouteInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    marketinfosList: jspb.Message.toObjectList(msg.getMarketinfosList(),
    proto.ffi.JupiterMarketInfo.toObject, includeInstance),
    inamount: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    outamount: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    amount: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    otheramountthreshold: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    swapmode: jspb.Message.getFieldWithDefault(msg, 6, 0),
    priceimpactpercent: (f = msg.getPriceimpactpercent()) && api_pb.PriceImpactPercent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffi.JupiterRouteInfo}
 */
proto.ffi.JupiterRouteInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffi.JupiterRouteInfo;
  return proto.ffi.JupiterRouteInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffi.JupiterRouteInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffi.JupiterRouteInfo}
 */
proto.ffi.JupiterRouteInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ffi.JupiterMarketInfo;
      reader.readMessage(value,proto.ffi.JupiterMarketInfo.deserializeBinaryFromReader);
      msg.addMarketinfos(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setInamount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOutamount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAmount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOtheramountthreshold(value);
      break;
    case 6:
      var value = /** @type {!proto.ffi.JupiterSwapMode} */ (reader.readEnum());
      msg.setSwapmode(value);
      break;
    case 7:
      var value = new api_pb.PriceImpactPercent;
      reader.readMessage(value,api_pb.PriceImpactPercent.deserializeBinaryFromReader);
      msg.setPriceimpactpercent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffi.JupiterRouteInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffi.JupiterRouteInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffi.JupiterRouteInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffi.JupiterRouteInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarketinfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ffi.JupiterMarketInfo.serializeBinaryToWriter
    );
  }
  f = message.getInamount();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getOutamount();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getOtheramountthreshold();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getSwapmode();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getPriceimpactpercent();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      api_pb.PriceImpactPercent.serializeBinaryToWriter
    );
  }
};


/**
 * repeated JupiterMarketInfo marketInfos = 1;
 * @return {!Array<!proto.ffi.JupiterMarketInfo>}
 */
proto.ffi.JupiterRouteInfo.prototype.getMarketinfosList = function() {
  return /** @type{!Array<!proto.ffi.JupiterMarketInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ffi.JupiterMarketInfo, 1));
};


/**
 * @param {!Array<!proto.ffi.JupiterMarketInfo>} value
 * @return {!proto.ffi.JupiterRouteInfo} returns this
*/
proto.ffi.JupiterRouteInfo.prototype.setMarketinfosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ffi.JupiterMarketInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ffi.JupiterMarketInfo}
 */
proto.ffi.JupiterRouteInfo.prototype.addMarketinfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ffi.JupiterMarketInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ffi.JupiterRouteInfo} returns this
 */
proto.ffi.JupiterRouteInfo.prototype.clearMarketinfosList = function() {
  return this.setMarketinfosList([]);
};


/**
 * optional float inAmount = 2;
 * @return {number}
 */
proto.ffi.JupiterRouteInfo.prototype.getInamount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ffi.JupiterRouteInfo} returns this
 */
proto.ffi.JupiterRouteInfo.prototype.setInamount = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float outAmount = 3;
 * @return {number}
 */
proto.ffi.JupiterRouteInfo.prototype.getOutamount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ffi.JupiterRouteInfo} returns this
 */
proto.ffi.JupiterRouteInfo.prototype.setOutamount = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float amount = 4;
 * @return {number}
 */
proto.ffi.JupiterRouteInfo.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ffi.JupiterRouteInfo} returns this
 */
proto.ffi.JupiterRouteInfo.prototype.setAmount = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float otherAmountThreshold = 5;
 * @return {number}
 */
proto.ffi.JupiterRouteInfo.prototype.getOtheramountthreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ffi.JupiterRouteInfo} returns this
 */
proto.ffi.JupiterRouteInfo.prototype.setOtheramountthreshold = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional JupiterSwapMode swapMode = 6;
 * @return {!proto.ffi.JupiterSwapMode}
 */
proto.ffi.JupiterRouteInfo.prototype.getSwapmode = function() {
  return /** @type {!proto.ffi.JupiterSwapMode} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.ffi.JupiterSwapMode} value
 * @return {!proto.ffi.JupiterRouteInfo} returns this
 */
proto.ffi.JupiterRouteInfo.prototype.setSwapmode = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional api.PriceImpactPercent priceImpactPercent = 7;
 * @return {?proto.api.PriceImpactPercent}
 */
proto.ffi.JupiterRouteInfo.prototype.getPriceimpactpercent = function() {
  return /** @type{?proto.api.PriceImpactPercent} */ (
    jspb.Message.getWrapperField(this, api_pb.PriceImpactPercent, 7));
};


/**
 * @param {?proto.api.PriceImpactPercent|undefined} value
 * @return {!proto.ffi.JupiterRouteInfo} returns this
*/
proto.ffi.JupiterRouteInfo.prototype.setPriceimpactpercent = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ffi.JupiterRouteInfo} returns this
 */
proto.ffi.JupiterRouteInfo.prototype.clearPriceimpactpercent = function() {
  return this.setPriceimpactpercent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ffi.JupiterRouteInfo.prototype.hasPriceimpactpercent = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffi.JupiterMarketInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ffi.JupiterMarketInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffi.JupiterMarketInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffi.JupiterMarketInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    amm: (f = msg.getAmm()) && proto.ffi.JupiterAmm.toObject(includeInstance, f),
    inputmint: jspb.Message.getFieldWithDefault(msg, 2, ""),
    outputmint: jspb.Message.getFieldWithDefault(msg, 3, ""),
    inamount: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    outamount: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    priceimpactpercent: (f = msg.getPriceimpactpercent()) && api_pb.PriceImpactPercent.toObject(includeInstance, f),
    liquiditypoolfee: (f = msg.getLiquiditypoolfee()) && api_pb.Fee.toObject(includeInstance, f),
    platformfee: (f = msg.getPlatformfee()) && api_pb.Fee.toObject(includeInstance, f),
    notenoughliquidity: jspb.Message.getBooleanFieldWithDefault(msg, 9, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffi.JupiterMarketInfo}
 */
proto.ffi.JupiterMarketInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffi.JupiterMarketInfo;
  return proto.ffi.JupiterMarketInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffi.JupiterMarketInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffi.JupiterMarketInfo}
 */
proto.ffi.JupiterMarketInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ffi.JupiterAmm;
      reader.readMessage(value,proto.ffi.JupiterAmm.deserializeBinaryFromReader);
      msg.setAmm(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInputmint(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutputmint(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setInamount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOutamount(value);
      break;
    case 6:
      var value = new api_pb.PriceImpactPercent;
      reader.readMessage(value,api_pb.PriceImpactPercent.deserializeBinaryFromReader);
      msg.setPriceimpactpercent(value);
      break;
    case 7:
      var value = new api_pb.Fee;
      reader.readMessage(value,api_pb.Fee.deserializeBinaryFromReader);
      msg.setLiquiditypoolfee(value);
      break;
    case 8:
      var value = new api_pb.Fee;
      reader.readMessage(value,api_pb.Fee.deserializeBinaryFromReader);
      msg.setPlatformfee(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNotenoughliquidity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffi.JupiterMarketInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffi.JupiterMarketInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffi.JupiterMarketInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffi.JupiterMarketInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmm();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ffi.JupiterAmm.serializeBinaryToWriter
    );
  }
  f = message.getInputmint();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOutputmint();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getInamount();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getOutamount();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getPriceimpactpercent();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      api_pb.PriceImpactPercent.serializeBinaryToWriter
    );
  }
  f = message.getLiquiditypoolfee();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      api_pb.Fee.serializeBinaryToWriter
    );
  }
  f = message.getPlatformfee();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      api_pb.Fee.serializeBinaryToWriter
    );
  }
  f = message.getNotenoughliquidity();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
};


/**
 * optional JupiterAmm amm = 1;
 * @return {?proto.ffi.JupiterAmm}
 */
proto.ffi.JupiterMarketInfo.prototype.getAmm = function() {
  return /** @type{?proto.ffi.JupiterAmm} */ (
    jspb.Message.getWrapperField(this, proto.ffi.JupiterAmm, 1));
};


/**
 * @param {?proto.ffi.JupiterAmm|undefined} value
 * @return {!proto.ffi.JupiterMarketInfo} returns this
*/
proto.ffi.JupiterMarketInfo.prototype.setAmm = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ffi.JupiterMarketInfo} returns this
 */
proto.ffi.JupiterMarketInfo.prototype.clearAmm = function() {
  return this.setAmm(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ffi.JupiterMarketInfo.prototype.hasAmm = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string inputMint = 2;
 * @return {string}
 */
proto.ffi.JupiterMarketInfo.prototype.getInputmint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffi.JupiterMarketInfo} returns this
 */
proto.ffi.JupiterMarketInfo.prototype.setInputmint = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string outputMint = 3;
 * @return {string}
 */
proto.ffi.JupiterMarketInfo.prototype.getOutputmint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffi.JupiterMarketInfo} returns this
 */
proto.ffi.JupiterMarketInfo.prototype.setOutputmint = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional float inAmount = 4;
 * @return {number}
 */
proto.ffi.JupiterMarketInfo.prototype.getInamount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ffi.JupiterMarketInfo} returns this
 */
proto.ffi.JupiterMarketInfo.prototype.setInamount = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float outAmount = 5;
 * @return {number}
 */
proto.ffi.JupiterMarketInfo.prototype.getOutamount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ffi.JupiterMarketInfo} returns this
 */
proto.ffi.JupiterMarketInfo.prototype.setOutamount = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional api.PriceImpactPercent priceImpactPercent = 6;
 * @return {?proto.api.PriceImpactPercent}
 */
proto.ffi.JupiterMarketInfo.prototype.getPriceimpactpercent = function() {
  return /** @type{?proto.api.PriceImpactPercent} */ (
    jspb.Message.getWrapperField(this, api_pb.PriceImpactPercent, 6));
};


/**
 * @param {?proto.api.PriceImpactPercent|undefined} value
 * @return {!proto.ffi.JupiterMarketInfo} returns this
*/
proto.ffi.JupiterMarketInfo.prototype.setPriceimpactpercent = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ffi.JupiterMarketInfo} returns this
 */
proto.ffi.JupiterMarketInfo.prototype.clearPriceimpactpercent = function() {
  return this.setPriceimpactpercent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ffi.JupiterMarketInfo.prototype.hasPriceimpactpercent = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional api.Fee liquidityPoolFee = 7;
 * @return {?proto.api.Fee}
 */
proto.ffi.JupiterMarketInfo.prototype.getLiquiditypoolfee = function() {
  return /** @type{?proto.api.Fee} */ (
    jspb.Message.getWrapperField(this, api_pb.Fee, 7));
};


/**
 * @param {?proto.api.Fee|undefined} value
 * @return {!proto.ffi.JupiterMarketInfo} returns this
*/
proto.ffi.JupiterMarketInfo.prototype.setLiquiditypoolfee = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ffi.JupiterMarketInfo} returns this
 */
proto.ffi.JupiterMarketInfo.prototype.clearLiquiditypoolfee = function() {
  return this.setLiquiditypoolfee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ffi.JupiterMarketInfo.prototype.hasLiquiditypoolfee = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional api.Fee platformFee = 8;
 * @return {?proto.api.Fee}
 */
proto.ffi.JupiterMarketInfo.prototype.getPlatformfee = function() {
  return /** @type{?proto.api.Fee} */ (
    jspb.Message.getWrapperField(this, api_pb.Fee, 8));
};


/**
 * @param {?proto.api.Fee|undefined} value
 * @return {!proto.ffi.JupiterMarketInfo} returns this
*/
proto.ffi.JupiterMarketInfo.prototype.setPlatformfee = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ffi.JupiterMarketInfo} returns this
 */
proto.ffi.JupiterMarketInfo.prototype.clearPlatformfee = function() {
  return this.setPlatformfee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ffi.JupiterMarketInfo.prototype.hasPlatformfee = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bool notEnoughLiquidity = 9;
 * @return {boolean}
 */
proto.ffi.JupiterMarketInfo.prototype.getNotenoughliquidity = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ffi.JupiterMarketInfo} returns this
 */
proto.ffi.JupiterMarketInfo.prototype.setNotenoughliquidity = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffi.JupiterAmm.prototype.toObject = function(opt_includeInstance) {
  return proto.ffi.JupiterAmm.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffi.JupiterAmm} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffi.JupiterAmm.toObject = function(includeInstance, msg) {
  var f, obj = {
    label: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffi.JupiterAmm}
 */
proto.ffi.JupiterAmm.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffi.JupiterAmm;
  return proto.ffi.JupiterAmm.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffi.JupiterAmm} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffi.JupiterAmm}
 */
proto.ffi.JupiterAmm.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffi.JupiterAmm.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffi.JupiterAmm.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffi.JupiterAmm} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffi.JupiterAmm.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string label = 1;
 * @return {string}
 */
proto.ffi.JupiterAmm.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffi.JupiterAmm} returns this
 */
proto.ffi.JupiterAmm.prototype.setLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string id = 2;
 * @return {string}
 */
proto.ffi.JupiterAmm.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffi.JupiterAmm} returns this
 */
proto.ffi.JupiterAmm.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.ffi.JupiterSwapMode = {
  JSM_EXACT_IN: 0,
  JSM_EXACT_OUT: 1
};

goog.object.extend(exports, proto.ffi);
