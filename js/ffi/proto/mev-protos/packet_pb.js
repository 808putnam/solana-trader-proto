// source: mev-protos/packet.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.packet.Meta', null, global);
goog.exportSymbol('proto.packet.Packet', null, global);
goog.exportSymbol('proto.packet.PacketBatch', null, global);
goog.exportSymbol('proto.packet.PacketFlags', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.packet.PacketBatch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.packet.PacketBatch.repeatedFields_, null);
};
goog.inherits(proto.packet.PacketBatch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.packet.PacketBatch.displayName = 'proto.packet.PacketBatch';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.packet.Packet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.packet.Packet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.packet.Packet.displayName = 'proto.packet.Packet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.packet.Meta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.packet.Meta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.packet.Meta.displayName = 'proto.packet.Meta';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.packet.PacketFlags = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.packet.PacketFlags, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.packet.PacketFlags.displayName = 'proto.packet.PacketFlags';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.packet.PacketBatch.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.packet.PacketBatch.prototype.toObject = function(opt_includeInstance) {
  return proto.packet.PacketBatch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.packet.PacketBatch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.packet.PacketBatch.toObject = function(includeInstance, msg) {
  var f, obj = {
    packetsList: jspb.Message.toObjectList(msg.getPacketsList(),
    proto.packet.Packet.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.packet.PacketBatch}
 */
proto.packet.PacketBatch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.packet.PacketBatch;
  return proto.packet.PacketBatch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.packet.PacketBatch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.packet.PacketBatch}
 */
proto.packet.PacketBatch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.packet.Packet;
      reader.readMessage(value,proto.packet.Packet.deserializeBinaryFromReader);
      msg.addPackets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.packet.PacketBatch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.packet.PacketBatch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.packet.PacketBatch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.packet.PacketBatch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPacketsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.packet.Packet.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Packet packets = 1;
 * @return {!Array<!proto.packet.Packet>}
 */
proto.packet.PacketBatch.prototype.getPacketsList = function() {
  return /** @type{!Array<!proto.packet.Packet>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.packet.Packet, 1));
};


/**
 * @param {!Array<!proto.packet.Packet>} value
 * @return {!proto.packet.PacketBatch} returns this
*/
proto.packet.PacketBatch.prototype.setPacketsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.packet.Packet=} opt_value
 * @param {number=} opt_index
 * @return {!proto.packet.Packet}
 */
proto.packet.PacketBatch.prototype.addPackets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.packet.Packet, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.packet.PacketBatch} returns this
 */
proto.packet.PacketBatch.prototype.clearPacketsList = function() {
  return this.setPacketsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.packet.Packet.prototype.toObject = function(opt_includeInstance) {
  return proto.packet.Packet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.packet.Packet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.packet.Packet.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64(),
    meta: (f = msg.getMeta()) && proto.packet.Meta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.packet.Packet}
 */
proto.packet.Packet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.packet.Packet;
  return proto.packet.Packet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.packet.Packet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.packet.Packet}
 */
proto.packet.Packet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 2:
      var value = new proto.packet.Meta;
      reader.readMessage(value,proto.packet.Meta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.packet.Packet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.packet.Packet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.packet.Packet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.packet.Packet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.packet.Meta.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.packet.Packet.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.packet.Packet.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.packet.Packet.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.packet.Packet} returns this
 */
proto.packet.Packet.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional Meta meta = 2;
 * @return {?proto.packet.Meta}
 */
proto.packet.Packet.prototype.getMeta = function() {
  return /** @type{?proto.packet.Meta} */ (
    jspb.Message.getWrapperField(this, proto.packet.Meta, 2));
};


/**
 * @param {?proto.packet.Meta|undefined} value
 * @return {!proto.packet.Packet} returns this
*/
proto.packet.Packet.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.packet.Packet} returns this
 */
proto.packet.Packet.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.packet.Packet.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.packet.Meta.prototype.toObject = function(opt_includeInstance) {
  return proto.packet.Meta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.packet.Meta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.packet.Meta.toObject = function(includeInstance, msg) {
  var f, obj = {
    size: jspb.Message.getFieldWithDefault(msg, 1, 0),
    addr: jspb.Message.getFieldWithDefault(msg, 2, ""),
    port: jspb.Message.getFieldWithDefault(msg, 3, 0),
    flags: (f = msg.getFlags()) && proto.packet.PacketFlags.toObject(includeInstance, f),
    senderStake: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.packet.Meta}
 */
proto.packet.Meta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.packet.Meta;
  return proto.packet.Meta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.packet.Meta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.packet.Meta}
 */
proto.packet.Meta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSize(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddr(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    case 4:
      var value = new proto.packet.PacketFlags;
      reader.readMessage(value,proto.packet.PacketFlags.deserializeBinaryFromReader);
      msg.setFlags(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSenderStake(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.packet.Meta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.packet.Meta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.packet.Meta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.packet.Meta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSize();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getAddr();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getFlags();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.packet.PacketFlags.serializeBinaryToWriter
    );
  }
  f = message.getSenderStake();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional uint64 size = 1;
 * @return {number}
 */
proto.packet.Meta.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.packet.Meta} returns this
 */
proto.packet.Meta.prototype.setSize = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string addr = 2;
 * @return {string}
 */
proto.packet.Meta.prototype.getAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.packet.Meta} returns this
 */
proto.packet.Meta.prototype.setAddr = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 port = 3;
 * @return {number}
 */
proto.packet.Meta.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.packet.Meta} returns this
 */
proto.packet.Meta.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional PacketFlags flags = 4;
 * @return {?proto.packet.PacketFlags}
 */
proto.packet.Meta.prototype.getFlags = function() {
  return /** @type{?proto.packet.PacketFlags} */ (
    jspb.Message.getWrapperField(this, proto.packet.PacketFlags, 4));
};


/**
 * @param {?proto.packet.PacketFlags|undefined} value
 * @return {!proto.packet.Meta} returns this
*/
proto.packet.Meta.prototype.setFlags = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.packet.Meta} returns this
 */
proto.packet.Meta.prototype.clearFlags = function() {
  return this.setFlags(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.packet.Meta.prototype.hasFlags = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint64 sender_stake = 5;
 * @return {number}
 */
proto.packet.Meta.prototype.getSenderStake = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.packet.Meta} returns this
 */
proto.packet.Meta.prototype.setSenderStake = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.packet.PacketFlags.prototype.toObject = function(opt_includeInstance) {
  return proto.packet.PacketFlags.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.packet.PacketFlags} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.packet.PacketFlags.toObject = function(includeInstance, msg) {
  var f, obj = {
    discard: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    forwarded: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    repair: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    simpleVoteTx: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    tracerPacket: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.packet.PacketFlags}
 */
proto.packet.PacketFlags.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.packet.PacketFlags;
  return proto.packet.PacketFlags.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.packet.PacketFlags} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.packet.PacketFlags}
 */
proto.packet.PacketFlags.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDiscard(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForwarded(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRepair(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSimpleVoteTx(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTracerPacket(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.packet.PacketFlags.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.packet.PacketFlags.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.packet.PacketFlags} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.packet.PacketFlags.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDiscard();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getForwarded();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getRepair();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getSimpleVoteTx();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getTracerPacket();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional bool discard = 1;
 * @return {boolean}
 */
proto.packet.PacketFlags.prototype.getDiscard = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.packet.PacketFlags} returns this
 */
proto.packet.PacketFlags.prototype.setDiscard = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool forwarded = 2;
 * @return {boolean}
 */
proto.packet.PacketFlags.prototype.getForwarded = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.packet.PacketFlags} returns this
 */
proto.packet.PacketFlags.prototype.setForwarded = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool repair = 3;
 * @return {boolean}
 */
proto.packet.PacketFlags.prototype.getRepair = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.packet.PacketFlags} returns this
 */
proto.packet.PacketFlags.prototype.setRepair = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool simple_vote_tx = 4;
 * @return {boolean}
 */
proto.packet.PacketFlags.prototype.getSimpleVoteTx = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.packet.PacketFlags} returns this
 */
proto.packet.PacketFlags.prototype.setSimpleVoteTx = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool tracer_packet = 5;
 * @return {boolean}
 */
proto.packet.PacketFlags.prototype.getTracerPacket = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.packet.PacketFlags} returns this
 */
proto.packet.PacketFlags.prototype.setTracerPacket = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


goog.object.extend(exports, proto.packet);
