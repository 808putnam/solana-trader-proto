// source: mev-protos/relayer.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var mev$protos_packet_pb = require('../mev-protos/packet_pb.js');
goog.object.extend(proto, mev$protos_packet_pb);
var mev$protos_shared_pb = require('../mev-protos/shared_pb.js');
goog.object.extend(proto, mev$protos_shared_pb);
goog.exportSymbol('proto.relayer.GetTpuConfigsRequest', null, global);
goog.exportSymbol('proto.relayer.GetTpuConfigsResponse', null, global);
goog.exportSymbol('proto.relayer.SubscribePacketsRequest', null, global);
goog.exportSymbol('proto.relayer.SubscribePacketsResponse', null, global);
goog.exportSymbol('proto.relayer.SubscribePacketsResponse.MsgCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.relayer.GetTpuConfigsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.relayer.GetTpuConfigsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.relayer.GetTpuConfigsRequest.displayName = 'proto.relayer.GetTpuConfigsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.relayer.GetTpuConfigsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.relayer.GetTpuConfigsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.relayer.GetTpuConfigsResponse.displayName = 'proto.relayer.GetTpuConfigsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.relayer.SubscribePacketsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.relayer.SubscribePacketsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.relayer.SubscribePacketsRequest.displayName = 'proto.relayer.SubscribePacketsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.relayer.SubscribePacketsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.relayer.SubscribePacketsResponse.oneofGroups_);
};
goog.inherits(proto.relayer.SubscribePacketsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.relayer.SubscribePacketsResponse.displayName = 'proto.relayer.SubscribePacketsResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.relayer.GetTpuConfigsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.relayer.GetTpuConfigsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.relayer.GetTpuConfigsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relayer.GetTpuConfigsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.relayer.GetTpuConfigsRequest}
 */
proto.relayer.GetTpuConfigsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.relayer.GetTpuConfigsRequest;
  return proto.relayer.GetTpuConfigsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.relayer.GetTpuConfigsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.relayer.GetTpuConfigsRequest}
 */
proto.relayer.GetTpuConfigsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.relayer.GetTpuConfigsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.relayer.GetTpuConfigsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.relayer.GetTpuConfigsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relayer.GetTpuConfigsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.relayer.GetTpuConfigsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.relayer.GetTpuConfigsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.relayer.GetTpuConfigsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relayer.GetTpuConfigsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tpu: (f = msg.getTpu()) && mev$protos_shared_pb.Socket.toObject(includeInstance, f),
    tpuForward: (f = msg.getTpuForward()) && mev$protos_shared_pb.Socket.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.relayer.GetTpuConfigsResponse}
 */
proto.relayer.GetTpuConfigsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.relayer.GetTpuConfigsResponse;
  return proto.relayer.GetTpuConfigsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.relayer.GetTpuConfigsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.relayer.GetTpuConfigsResponse}
 */
proto.relayer.GetTpuConfigsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new mev$protos_shared_pb.Socket;
      reader.readMessage(value,mev$protos_shared_pb.Socket.deserializeBinaryFromReader);
      msg.setTpu(value);
      break;
    case 2:
      var value = new mev$protos_shared_pb.Socket;
      reader.readMessage(value,mev$protos_shared_pb.Socket.deserializeBinaryFromReader);
      msg.setTpuForward(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.relayer.GetTpuConfigsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.relayer.GetTpuConfigsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.relayer.GetTpuConfigsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relayer.GetTpuConfigsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTpu();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      mev$protos_shared_pb.Socket.serializeBinaryToWriter
    );
  }
  f = message.getTpuForward();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      mev$protos_shared_pb.Socket.serializeBinaryToWriter
    );
  }
};


/**
 * optional shared.Socket tpu = 1;
 * @return {?proto.shared.Socket}
 */
proto.relayer.GetTpuConfigsResponse.prototype.getTpu = function() {
  return /** @type{?proto.shared.Socket} */ (
    jspb.Message.getWrapperField(this, mev$protos_shared_pb.Socket, 1));
};


/**
 * @param {?proto.shared.Socket|undefined} value
 * @return {!proto.relayer.GetTpuConfigsResponse} returns this
*/
proto.relayer.GetTpuConfigsResponse.prototype.setTpu = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.relayer.GetTpuConfigsResponse} returns this
 */
proto.relayer.GetTpuConfigsResponse.prototype.clearTpu = function() {
  return this.setTpu(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.relayer.GetTpuConfigsResponse.prototype.hasTpu = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional shared.Socket tpu_forward = 2;
 * @return {?proto.shared.Socket}
 */
proto.relayer.GetTpuConfigsResponse.prototype.getTpuForward = function() {
  return /** @type{?proto.shared.Socket} */ (
    jspb.Message.getWrapperField(this, mev$protos_shared_pb.Socket, 2));
};


/**
 * @param {?proto.shared.Socket|undefined} value
 * @return {!proto.relayer.GetTpuConfigsResponse} returns this
*/
proto.relayer.GetTpuConfigsResponse.prototype.setTpuForward = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.relayer.GetTpuConfigsResponse} returns this
 */
proto.relayer.GetTpuConfigsResponse.prototype.clearTpuForward = function() {
  return this.setTpuForward(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.relayer.GetTpuConfigsResponse.prototype.hasTpuForward = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.relayer.SubscribePacketsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.relayer.SubscribePacketsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.relayer.SubscribePacketsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relayer.SubscribePacketsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.relayer.SubscribePacketsRequest}
 */
proto.relayer.SubscribePacketsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.relayer.SubscribePacketsRequest;
  return proto.relayer.SubscribePacketsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.relayer.SubscribePacketsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.relayer.SubscribePacketsRequest}
 */
proto.relayer.SubscribePacketsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.relayer.SubscribePacketsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.relayer.SubscribePacketsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.relayer.SubscribePacketsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relayer.SubscribePacketsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.relayer.SubscribePacketsResponse.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.relayer.SubscribePacketsResponse.MsgCase = {
  MSG_NOT_SET: 0,
  HEARTBEAT: 2,
  BATCH: 3
};

/**
 * @return {proto.relayer.SubscribePacketsResponse.MsgCase}
 */
proto.relayer.SubscribePacketsResponse.prototype.getMsgCase = function() {
  return /** @type {proto.relayer.SubscribePacketsResponse.MsgCase} */(jspb.Message.computeOneofCase(this, proto.relayer.SubscribePacketsResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.relayer.SubscribePacketsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.relayer.SubscribePacketsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.relayer.SubscribePacketsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relayer.SubscribePacketsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && mev$protos_shared_pb.Header.toObject(includeInstance, f),
    heartbeat: (f = msg.getHeartbeat()) && mev$protos_shared_pb.Heartbeat.toObject(includeInstance, f),
    batch: (f = msg.getBatch()) && mev$protos_packet_pb.PacketBatch.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.relayer.SubscribePacketsResponse}
 */
proto.relayer.SubscribePacketsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.relayer.SubscribePacketsResponse;
  return proto.relayer.SubscribePacketsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.relayer.SubscribePacketsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.relayer.SubscribePacketsResponse}
 */
proto.relayer.SubscribePacketsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new mev$protos_shared_pb.Header;
      reader.readMessage(value,mev$protos_shared_pb.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new mev$protos_shared_pb.Heartbeat;
      reader.readMessage(value,mev$protos_shared_pb.Heartbeat.deserializeBinaryFromReader);
      msg.setHeartbeat(value);
      break;
    case 3:
      var value = new mev$protos_packet_pb.PacketBatch;
      reader.readMessage(value,mev$protos_packet_pb.PacketBatch.deserializeBinaryFromReader);
      msg.setBatch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.relayer.SubscribePacketsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.relayer.SubscribePacketsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.relayer.SubscribePacketsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relayer.SubscribePacketsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      mev$protos_shared_pb.Header.serializeBinaryToWriter
    );
  }
  f = message.getHeartbeat();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      mev$protos_shared_pb.Heartbeat.serializeBinaryToWriter
    );
  }
  f = message.getBatch();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      mev$protos_packet_pb.PacketBatch.serializeBinaryToWriter
    );
  }
};


/**
 * optional shared.Header header = 1;
 * @return {?proto.shared.Header}
 */
proto.relayer.SubscribePacketsResponse.prototype.getHeader = function() {
  return /** @type{?proto.shared.Header} */ (
    jspb.Message.getWrapperField(this, mev$protos_shared_pb.Header, 1));
};


/**
 * @param {?proto.shared.Header|undefined} value
 * @return {!proto.relayer.SubscribePacketsResponse} returns this
*/
proto.relayer.SubscribePacketsResponse.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.relayer.SubscribePacketsResponse} returns this
 */
proto.relayer.SubscribePacketsResponse.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.relayer.SubscribePacketsResponse.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional shared.Heartbeat heartbeat = 2;
 * @return {?proto.shared.Heartbeat}
 */
proto.relayer.SubscribePacketsResponse.prototype.getHeartbeat = function() {
  return /** @type{?proto.shared.Heartbeat} */ (
    jspb.Message.getWrapperField(this, mev$protos_shared_pb.Heartbeat, 2));
};


/**
 * @param {?proto.shared.Heartbeat|undefined} value
 * @return {!proto.relayer.SubscribePacketsResponse} returns this
*/
proto.relayer.SubscribePacketsResponse.prototype.setHeartbeat = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.relayer.SubscribePacketsResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.relayer.SubscribePacketsResponse} returns this
 */
proto.relayer.SubscribePacketsResponse.prototype.clearHeartbeat = function() {
  return this.setHeartbeat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.relayer.SubscribePacketsResponse.prototype.hasHeartbeat = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional packet.PacketBatch batch = 3;
 * @return {?proto.packet.PacketBatch}
 */
proto.relayer.SubscribePacketsResponse.prototype.getBatch = function() {
  return /** @type{?proto.packet.PacketBatch} */ (
    jspb.Message.getWrapperField(this, mev$protos_packet_pb.PacketBatch, 3));
};


/**
 * @param {?proto.packet.PacketBatch|undefined} value
 * @return {!proto.relayer.SubscribePacketsResponse} returns this
*/
proto.relayer.SubscribePacketsResponse.prototype.setBatch = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.relayer.SubscribePacketsResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.relayer.SubscribePacketsResponse} returns this
 */
proto.relayer.SubscribePacketsResponse.prototype.clearBatch = function() {
  return this.setBatch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.relayer.SubscribePacketsResponse.prototype.hasBatch = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.relayer);
