// source: mev-protos/block_engine.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var mev$protos_packet_pb = require('../mev-protos/packet_pb.js');
goog.object.extend(proto, mev$protos_packet_pb);
var mev$protos_shared_pb = require('../mev-protos/shared_pb.js');
goog.object.extend(proto, mev$protos_shared_pb);
var mev$protos_bundle_pb = require('../mev-protos/bundle_pb.js');
goog.object.extend(proto, mev$protos_bundle_pb);
goog.exportSymbol('proto.block_engine.AccountsOfInterest', null, global);
goog.exportSymbol('proto.block_engine.AccountsOfInterestRequest', null, global);
goog.exportSymbol('proto.block_engine.AccountsOfInterestUpdate', null, global);
goog.exportSymbol('proto.block_engine.BlockBuilderFeeInfoRequest', null, global);
goog.exportSymbol('proto.block_engine.BlockBuilderFeeInfoResponse', null, global);
goog.exportSymbol('proto.block_engine.ExpiringPacketBatch', null, global);
goog.exportSymbol('proto.block_engine.PacketBatchUpdate', null, global);
goog.exportSymbol('proto.block_engine.PacketBatchUpdate.MsgCase', null, global);
goog.exportSymbol('proto.block_engine.ProgramsOfInterestRequest', null, global);
goog.exportSymbol('proto.block_engine.ProgramsOfInterestUpdate', null, global);
goog.exportSymbol('proto.block_engine.StartExpiringPacketStreamResponse', null, global);
goog.exportSymbol('proto.block_engine.SubscribeBundlesRequest', null, global);
goog.exportSymbol('proto.block_engine.SubscribeBundlesResponse', null, global);
goog.exportSymbol('proto.block_engine.SubscribePacketsRequest', null, global);
goog.exportSymbol('proto.block_engine.SubscribePacketsResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.block_engine.SubscribePacketsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.block_engine.SubscribePacketsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.block_engine.SubscribePacketsRequest.displayName = 'proto.block_engine.SubscribePacketsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.block_engine.SubscribePacketsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.block_engine.SubscribePacketsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.block_engine.SubscribePacketsResponse.displayName = 'proto.block_engine.SubscribePacketsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.block_engine.SubscribeBundlesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.block_engine.SubscribeBundlesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.block_engine.SubscribeBundlesRequest.displayName = 'proto.block_engine.SubscribeBundlesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.block_engine.SubscribeBundlesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.block_engine.SubscribeBundlesResponse.repeatedFields_, null);
};
goog.inherits(proto.block_engine.SubscribeBundlesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.block_engine.SubscribeBundlesResponse.displayName = 'proto.block_engine.SubscribeBundlesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.block_engine.BlockBuilderFeeInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.block_engine.BlockBuilderFeeInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.block_engine.BlockBuilderFeeInfoRequest.displayName = 'proto.block_engine.BlockBuilderFeeInfoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.block_engine.BlockBuilderFeeInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.block_engine.BlockBuilderFeeInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.block_engine.BlockBuilderFeeInfoResponse.displayName = 'proto.block_engine.BlockBuilderFeeInfoResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.block_engine.AccountsOfInterest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.block_engine.AccountsOfInterest.repeatedFields_, null);
};
goog.inherits(proto.block_engine.AccountsOfInterest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.block_engine.AccountsOfInterest.displayName = 'proto.block_engine.AccountsOfInterest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.block_engine.AccountsOfInterestRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.block_engine.AccountsOfInterestRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.block_engine.AccountsOfInterestRequest.displayName = 'proto.block_engine.AccountsOfInterestRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.block_engine.AccountsOfInterestUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.block_engine.AccountsOfInterestUpdate.repeatedFields_, null);
};
goog.inherits(proto.block_engine.AccountsOfInterestUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.block_engine.AccountsOfInterestUpdate.displayName = 'proto.block_engine.AccountsOfInterestUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.block_engine.ProgramsOfInterestRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.block_engine.ProgramsOfInterestRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.block_engine.ProgramsOfInterestRequest.displayName = 'proto.block_engine.ProgramsOfInterestRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.block_engine.ProgramsOfInterestUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.block_engine.ProgramsOfInterestUpdate.repeatedFields_, null);
};
goog.inherits(proto.block_engine.ProgramsOfInterestUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.block_engine.ProgramsOfInterestUpdate.displayName = 'proto.block_engine.ProgramsOfInterestUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.block_engine.ExpiringPacketBatch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.block_engine.ExpiringPacketBatch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.block_engine.ExpiringPacketBatch.displayName = 'proto.block_engine.ExpiringPacketBatch';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.block_engine.PacketBatchUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.block_engine.PacketBatchUpdate.oneofGroups_);
};
goog.inherits(proto.block_engine.PacketBatchUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.block_engine.PacketBatchUpdate.displayName = 'proto.block_engine.PacketBatchUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.block_engine.StartExpiringPacketStreamResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.block_engine.StartExpiringPacketStreamResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.block_engine.StartExpiringPacketStreamResponse.displayName = 'proto.block_engine.StartExpiringPacketStreamResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.block_engine.SubscribePacketsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.block_engine.SubscribePacketsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.block_engine.SubscribePacketsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.block_engine.SubscribePacketsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.block_engine.SubscribePacketsRequest}
 */
proto.block_engine.SubscribePacketsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.block_engine.SubscribePacketsRequest;
  return proto.block_engine.SubscribePacketsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.block_engine.SubscribePacketsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.block_engine.SubscribePacketsRequest}
 */
proto.block_engine.SubscribePacketsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.block_engine.SubscribePacketsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.block_engine.SubscribePacketsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.block_engine.SubscribePacketsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.block_engine.SubscribePacketsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.block_engine.SubscribePacketsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.block_engine.SubscribePacketsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.block_engine.SubscribePacketsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.block_engine.SubscribePacketsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && mev$protos_shared_pb.Header.toObject(includeInstance, f),
    batch: (f = msg.getBatch()) && mev$protos_packet_pb.PacketBatch.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.block_engine.SubscribePacketsResponse}
 */
proto.block_engine.SubscribePacketsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.block_engine.SubscribePacketsResponse;
  return proto.block_engine.SubscribePacketsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.block_engine.SubscribePacketsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.block_engine.SubscribePacketsResponse}
 */
proto.block_engine.SubscribePacketsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new mev$protos_shared_pb.Header;
      reader.readMessage(value,mev$protos_shared_pb.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new mev$protos_packet_pb.PacketBatch;
      reader.readMessage(value,mev$protos_packet_pb.PacketBatch.deserializeBinaryFromReader);
      msg.setBatch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.block_engine.SubscribePacketsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.block_engine.SubscribePacketsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.block_engine.SubscribePacketsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.block_engine.SubscribePacketsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      mev$protos_shared_pb.Header.serializeBinaryToWriter
    );
  }
  f = message.getBatch();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      mev$protos_packet_pb.PacketBatch.serializeBinaryToWriter
    );
  }
};


/**
 * optional shared.Header header = 1;
 * @return {?proto.shared.Header}
 */
proto.block_engine.SubscribePacketsResponse.prototype.getHeader = function() {
  return /** @type{?proto.shared.Header} */ (
    jspb.Message.getWrapperField(this, mev$protos_shared_pb.Header, 1));
};


/**
 * @param {?proto.shared.Header|undefined} value
 * @return {!proto.block_engine.SubscribePacketsResponse} returns this
*/
proto.block_engine.SubscribePacketsResponse.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.block_engine.SubscribePacketsResponse} returns this
 */
proto.block_engine.SubscribePacketsResponse.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.block_engine.SubscribePacketsResponse.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional packet.PacketBatch batch = 2;
 * @return {?proto.packet.PacketBatch}
 */
proto.block_engine.SubscribePacketsResponse.prototype.getBatch = function() {
  return /** @type{?proto.packet.PacketBatch} */ (
    jspb.Message.getWrapperField(this, mev$protos_packet_pb.PacketBatch, 2));
};


/**
 * @param {?proto.packet.PacketBatch|undefined} value
 * @return {!proto.block_engine.SubscribePacketsResponse} returns this
*/
proto.block_engine.SubscribePacketsResponse.prototype.setBatch = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.block_engine.SubscribePacketsResponse} returns this
 */
proto.block_engine.SubscribePacketsResponse.prototype.clearBatch = function() {
  return this.setBatch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.block_engine.SubscribePacketsResponse.prototype.hasBatch = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.block_engine.SubscribeBundlesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.block_engine.SubscribeBundlesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.block_engine.SubscribeBundlesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.block_engine.SubscribeBundlesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.block_engine.SubscribeBundlesRequest}
 */
proto.block_engine.SubscribeBundlesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.block_engine.SubscribeBundlesRequest;
  return proto.block_engine.SubscribeBundlesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.block_engine.SubscribeBundlesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.block_engine.SubscribeBundlesRequest}
 */
proto.block_engine.SubscribeBundlesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.block_engine.SubscribeBundlesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.block_engine.SubscribeBundlesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.block_engine.SubscribeBundlesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.block_engine.SubscribeBundlesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.block_engine.SubscribeBundlesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.block_engine.SubscribeBundlesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.block_engine.SubscribeBundlesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.block_engine.SubscribeBundlesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.block_engine.SubscribeBundlesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    bundlesList: jspb.Message.toObjectList(msg.getBundlesList(),
    mev$protos_bundle_pb.BundleUuid.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.block_engine.SubscribeBundlesResponse}
 */
proto.block_engine.SubscribeBundlesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.block_engine.SubscribeBundlesResponse;
  return proto.block_engine.SubscribeBundlesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.block_engine.SubscribeBundlesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.block_engine.SubscribeBundlesResponse}
 */
proto.block_engine.SubscribeBundlesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new mev$protos_bundle_pb.BundleUuid;
      reader.readMessage(value,mev$protos_bundle_pb.BundleUuid.deserializeBinaryFromReader);
      msg.addBundles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.block_engine.SubscribeBundlesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.block_engine.SubscribeBundlesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.block_engine.SubscribeBundlesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.block_engine.SubscribeBundlesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBundlesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      mev$protos_bundle_pb.BundleUuid.serializeBinaryToWriter
    );
  }
};


/**
 * repeated bundle.BundleUuid bundles = 1;
 * @return {!Array<!proto.bundle.BundleUuid>}
 */
proto.block_engine.SubscribeBundlesResponse.prototype.getBundlesList = function() {
  return /** @type{!Array<!proto.bundle.BundleUuid>} */ (
    jspb.Message.getRepeatedWrapperField(this, mev$protos_bundle_pb.BundleUuid, 1));
};


/**
 * @param {!Array<!proto.bundle.BundleUuid>} value
 * @return {!proto.block_engine.SubscribeBundlesResponse} returns this
*/
proto.block_engine.SubscribeBundlesResponse.prototype.setBundlesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.bundle.BundleUuid=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bundle.BundleUuid}
 */
proto.block_engine.SubscribeBundlesResponse.prototype.addBundles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.bundle.BundleUuid, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.block_engine.SubscribeBundlesResponse} returns this
 */
proto.block_engine.SubscribeBundlesResponse.prototype.clearBundlesList = function() {
  return this.setBundlesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.block_engine.BlockBuilderFeeInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.block_engine.BlockBuilderFeeInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.block_engine.BlockBuilderFeeInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.block_engine.BlockBuilderFeeInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.block_engine.BlockBuilderFeeInfoRequest}
 */
proto.block_engine.BlockBuilderFeeInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.block_engine.BlockBuilderFeeInfoRequest;
  return proto.block_engine.BlockBuilderFeeInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.block_engine.BlockBuilderFeeInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.block_engine.BlockBuilderFeeInfoRequest}
 */
proto.block_engine.BlockBuilderFeeInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.block_engine.BlockBuilderFeeInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.block_engine.BlockBuilderFeeInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.block_engine.BlockBuilderFeeInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.block_engine.BlockBuilderFeeInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.block_engine.BlockBuilderFeeInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.block_engine.BlockBuilderFeeInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.block_engine.BlockBuilderFeeInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.block_engine.BlockBuilderFeeInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    pubkey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    commission: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.block_engine.BlockBuilderFeeInfoResponse}
 */
proto.block_engine.BlockBuilderFeeInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.block_engine.BlockBuilderFeeInfoResponse;
  return proto.block_engine.BlockBuilderFeeInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.block_engine.BlockBuilderFeeInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.block_engine.BlockBuilderFeeInfoResponse}
 */
proto.block_engine.BlockBuilderFeeInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPubkey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCommission(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.block_engine.BlockBuilderFeeInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.block_engine.BlockBuilderFeeInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.block_engine.BlockBuilderFeeInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.block_engine.BlockBuilderFeeInfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPubkey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCommission();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional string pubkey = 1;
 * @return {string}
 */
proto.block_engine.BlockBuilderFeeInfoResponse.prototype.getPubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.block_engine.BlockBuilderFeeInfoResponse} returns this
 */
proto.block_engine.BlockBuilderFeeInfoResponse.prototype.setPubkey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 commission = 2;
 * @return {number}
 */
proto.block_engine.BlockBuilderFeeInfoResponse.prototype.getCommission = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.block_engine.BlockBuilderFeeInfoResponse} returns this
 */
proto.block_engine.BlockBuilderFeeInfoResponse.prototype.setCommission = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.block_engine.AccountsOfInterest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.block_engine.AccountsOfInterest.prototype.toObject = function(opt_includeInstance) {
  return proto.block_engine.AccountsOfInterest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.block_engine.AccountsOfInterest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.block_engine.AccountsOfInterest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.block_engine.AccountsOfInterest}
 */
proto.block_engine.AccountsOfInterest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.block_engine.AccountsOfInterest;
  return proto.block_engine.AccountsOfInterest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.block_engine.AccountsOfInterest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.block_engine.AccountsOfInterest}
 */
proto.block_engine.AccountsOfInterest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addAccounts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.block_engine.AccountsOfInterest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.block_engine.AccountsOfInterest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.block_engine.AccountsOfInterest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.block_engine.AccountsOfInterest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string accounts = 1;
 * @return {!Array<string>}
 */
proto.block_engine.AccountsOfInterest.prototype.getAccountsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.block_engine.AccountsOfInterest} returns this
 */
proto.block_engine.AccountsOfInterest.prototype.setAccountsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.block_engine.AccountsOfInterest} returns this
 */
proto.block_engine.AccountsOfInterest.prototype.addAccounts = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.block_engine.AccountsOfInterest} returns this
 */
proto.block_engine.AccountsOfInterest.prototype.clearAccountsList = function() {
  return this.setAccountsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.block_engine.AccountsOfInterestRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.block_engine.AccountsOfInterestRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.block_engine.AccountsOfInterestRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.block_engine.AccountsOfInterestRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.block_engine.AccountsOfInterestRequest}
 */
proto.block_engine.AccountsOfInterestRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.block_engine.AccountsOfInterestRequest;
  return proto.block_engine.AccountsOfInterestRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.block_engine.AccountsOfInterestRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.block_engine.AccountsOfInterestRequest}
 */
proto.block_engine.AccountsOfInterestRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.block_engine.AccountsOfInterestRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.block_engine.AccountsOfInterestRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.block_engine.AccountsOfInterestRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.block_engine.AccountsOfInterestRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.block_engine.AccountsOfInterestUpdate.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.block_engine.AccountsOfInterestUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.block_engine.AccountsOfInterestUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.block_engine.AccountsOfInterestUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.block_engine.AccountsOfInterestUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.block_engine.AccountsOfInterestUpdate}
 */
proto.block_engine.AccountsOfInterestUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.block_engine.AccountsOfInterestUpdate;
  return proto.block_engine.AccountsOfInterestUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.block_engine.AccountsOfInterestUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.block_engine.AccountsOfInterestUpdate}
 */
proto.block_engine.AccountsOfInterestUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addAccounts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.block_engine.AccountsOfInterestUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.block_engine.AccountsOfInterestUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.block_engine.AccountsOfInterestUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.block_engine.AccountsOfInterestUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string accounts = 1;
 * @return {!Array<string>}
 */
proto.block_engine.AccountsOfInterestUpdate.prototype.getAccountsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.block_engine.AccountsOfInterestUpdate} returns this
 */
proto.block_engine.AccountsOfInterestUpdate.prototype.setAccountsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.block_engine.AccountsOfInterestUpdate} returns this
 */
proto.block_engine.AccountsOfInterestUpdate.prototype.addAccounts = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.block_engine.AccountsOfInterestUpdate} returns this
 */
proto.block_engine.AccountsOfInterestUpdate.prototype.clearAccountsList = function() {
  return this.setAccountsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.block_engine.ProgramsOfInterestRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.block_engine.ProgramsOfInterestRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.block_engine.ProgramsOfInterestRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.block_engine.ProgramsOfInterestRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.block_engine.ProgramsOfInterestRequest}
 */
proto.block_engine.ProgramsOfInterestRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.block_engine.ProgramsOfInterestRequest;
  return proto.block_engine.ProgramsOfInterestRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.block_engine.ProgramsOfInterestRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.block_engine.ProgramsOfInterestRequest}
 */
proto.block_engine.ProgramsOfInterestRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.block_engine.ProgramsOfInterestRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.block_engine.ProgramsOfInterestRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.block_engine.ProgramsOfInterestRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.block_engine.ProgramsOfInterestRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.block_engine.ProgramsOfInterestUpdate.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.block_engine.ProgramsOfInterestUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.block_engine.ProgramsOfInterestUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.block_engine.ProgramsOfInterestUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.block_engine.ProgramsOfInterestUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    programsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.block_engine.ProgramsOfInterestUpdate}
 */
proto.block_engine.ProgramsOfInterestUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.block_engine.ProgramsOfInterestUpdate;
  return proto.block_engine.ProgramsOfInterestUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.block_engine.ProgramsOfInterestUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.block_engine.ProgramsOfInterestUpdate}
 */
proto.block_engine.ProgramsOfInterestUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addPrograms(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.block_engine.ProgramsOfInterestUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.block_engine.ProgramsOfInterestUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.block_engine.ProgramsOfInterestUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.block_engine.ProgramsOfInterestUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProgramsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string programs = 1;
 * @return {!Array<string>}
 */
proto.block_engine.ProgramsOfInterestUpdate.prototype.getProgramsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.block_engine.ProgramsOfInterestUpdate} returns this
 */
proto.block_engine.ProgramsOfInterestUpdate.prototype.setProgramsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.block_engine.ProgramsOfInterestUpdate} returns this
 */
proto.block_engine.ProgramsOfInterestUpdate.prototype.addPrograms = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.block_engine.ProgramsOfInterestUpdate} returns this
 */
proto.block_engine.ProgramsOfInterestUpdate.prototype.clearProgramsList = function() {
  return this.setProgramsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.block_engine.ExpiringPacketBatch.prototype.toObject = function(opt_includeInstance) {
  return proto.block_engine.ExpiringPacketBatch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.block_engine.ExpiringPacketBatch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.block_engine.ExpiringPacketBatch.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && mev$protos_shared_pb.Header.toObject(includeInstance, f),
    batch: (f = msg.getBatch()) && mev$protos_packet_pb.PacketBatch.toObject(includeInstance, f),
    expiryMs: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.block_engine.ExpiringPacketBatch}
 */
proto.block_engine.ExpiringPacketBatch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.block_engine.ExpiringPacketBatch;
  return proto.block_engine.ExpiringPacketBatch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.block_engine.ExpiringPacketBatch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.block_engine.ExpiringPacketBatch}
 */
proto.block_engine.ExpiringPacketBatch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new mev$protos_shared_pb.Header;
      reader.readMessage(value,mev$protos_shared_pb.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new mev$protos_packet_pb.PacketBatch;
      reader.readMessage(value,mev$protos_packet_pb.PacketBatch.deserializeBinaryFromReader);
      msg.setBatch(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setExpiryMs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.block_engine.ExpiringPacketBatch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.block_engine.ExpiringPacketBatch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.block_engine.ExpiringPacketBatch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.block_engine.ExpiringPacketBatch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      mev$protos_shared_pb.Header.serializeBinaryToWriter
    );
  }
  f = message.getBatch();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      mev$protos_packet_pb.PacketBatch.serializeBinaryToWriter
    );
  }
  f = message.getExpiryMs();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional shared.Header header = 1;
 * @return {?proto.shared.Header}
 */
proto.block_engine.ExpiringPacketBatch.prototype.getHeader = function() {
  return /** @type{?proto.shared.Header} */ (
    jspb.Message.getWrapperField(this, mev$protos_shared_pb.Header, 1));
};


/**
 * @param {?proto.shared.Header|undefined} value
 * @return {!proto.block_engine.ExpiringPacketBatch} returns this
*/
proto.block_engine.ExpiringPacketBatch.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.block_engine.ExpiringPacketBatch} returns this
 */
proto.block_engine.ExpiringPacketBatch.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.block_engine.ExpiringPacketBatch.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional packet.PacketBatch batch = 2;
 * @return {?proto.packet.PacketBatch}
 */
proto.block_engine.ExpiringPacketBatch.prototype.getBatch = function() {
  return /** @type{?proto.packet.PacketBatch} */ (
    jspb.Message.getWrapperField(this, mev$protos_packet_pb.PacketBatch, 2));
};


/**
 * @param {?proto.packet.PacketBatch|undefined} value
 * @return {!proto.block_engine.ExpiringPacketBatch} returns this
*/
proto.block_engine.ExpiringPacketBatch.prototype.setBatch = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.block_engine.ExpiringPacketBatch} returns this
 */
proto.block_engine.ExpiringPacketBatch.prototype.clearBatch = function() {
  return this.setBatch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.block_engine.ExpiringPacketBatch.prototype.hasBatch = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 expiry_ms = 3;
 * @return {number}
 */
proto.block_engine.ExpiringPacketBatch.prototype.getExpiryMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.block_engine.ExpiringPacketBatch} returns this
 */
proto.block_engine.ExpiringPacketBatch.prototype.setExpiryMs = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.block_engine.PacketBatchUpdate.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.block_engine.PacketBatchUpdate.MsgCase = {
  MSG_NOT_SET: 0,
  BATCHES: 1,
  HEARTBEAT: 2
};

/**
 * @return {proto.block_engine.PacketBatchUpdate.MsgCase}
 */
proto.block_engine.PacketBatchUpdate.prototype.getMsgCase = function() {
  return /** @type {proto.block_engine.PacketBatchUpdate.MsgCase} */(jspb.Message.computeOneofCase(this, proto.block_engine.PacketBatchUpdate.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.block_engine.PacketBatchUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.block_engine.PacketBatchUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.block_engine.PacketBatchUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.block_engine.PacketBatchUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    batches: (f = msg.getBatches()) && proto.block_engine.ExpiringPacketBatch.toObject(includeInstance, f),
    heartbeat: (f = msg.getHeartbeat()) && mev$protos_shared_pb.Heartbeat.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.block_engine.PacketBatchUpdate}
 */
proto.block_engine.PacketBatchUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.block_engine.PacketBatchUpdate;
  return proto.block_engine.PacketBatchUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.block_engine.PacketBatchUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.block_engine.PacketBatchUpdate}
 */
proto.block_engine.PacketBatchUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.block_engine.ExpiringPacketBatch;
      reader.readMessage(value,proto.block_engine.ExpiringPacketBatch.deserializeBinaryFromReader);
      msg.setBatches(value);
      break;
    case 2:
      var value = new mev$protos_shared_pb.Heartbeat;
      reader.readMessage(value,mev$protos_shared_pb.Heartbeat.deserializeBinaryFromReader);
      msg.setHeartbeat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.block_engine.PacketBatchUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.block_engine.PacketBatchUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.block_engine.PacketBatchUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.block_engine.PacketBatchUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBatches();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.block_engine.ExpiringPacketBatch.serializeBinaryToWriter
    );
  }
  f = message.getHeartbeat();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      mev$protos_shared_pb.Heartbeat.serializeBinaryToWriter
    );
  }
};


/**
 * optional ExpiringPacketBatch batches = 1;
 * @return {?proto.block_engine.ExpiringPacketBatch}
 */
proto.block_engine.PacketBatchUpdate.prototype.getBatches = function() {
  return /** @type{?proto.block_engine.ExpiringPacketBatch} */ (
    jspb.Message.getWrapperField(this, proto.block_engine.ExpiringPacketBatch, 1));
};


/**
 * @param {?proto.block_engine.ExpiringPacketBatch|undefined} value
 * @return {!proto.block_engine.PacketBatchUpdate} returns this
*/
proto.block_engine.PacketBatchUpdate.prototype.setBatches = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.block_engine.PacketBatchUpdate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.block_engine.PacketBatchUpdate} returns this
 */
proto.block_engine.PacketBatchUpdate.prototype.clearBatches = function() {
  return this.setBatches(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.block_engine.PacketBatchUpdate.prototype.hasBatches = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional shared.Heartbeat heartbeat = 2;
 * @return {?proto.shared.Heartbeat}
 */
proto.block_engine.PacketBatchUpdate.prototype.getHeartbeat = function() {
  return /** @type{?proto.shared.Heartbeat} */ (
    jspb.Message.getWrapperField(this, mev$protos_shared_pb.Heartbeat, 2));
};


/**
 * @param {?proto.shared.Heartbeat|undefined} value
 * @return {!proto.block_engine.PacketBatchUpdate} returns this
*/
proto.block_engine.PacketBatchUpdate.prototype.setHeartbeat = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.block_engine.PacketBatchUpdate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.block_engine.PacketBatchUpdate} returns this
 */
proto.block_engine.PacketBatchUpdate.prototype.clearHeartbeat = function() {
  return this.setHeartbeat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.block_engine.PacketBatchUpdate.prototype.hasHeartbeat = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.block_engine.StartExpiringPacketStreamResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.block_engine.StartExpiringPacketStreamResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.block_engine.StartExpiringPacketStreamResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.block_engine.StartExpiringPacketStreamResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    heartbeat: (f = msg.getHeartbeat()) && mev$protos_shared_pb.Heartbeat.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.block_engine.StartExpiringPacketStreamResponse}
 */
proto.block_engine.StartExpiringPacketStreamResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.block_engine.StartExpiringPacketStreamResponse;
  return proto.block_engine.StartExpiringPacketStreamResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.block_engine.StartExpiringPacketStreamResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.block_engine.StartExpiringPacketStreamResponse}
 */
proto.block_engine.StartExpiringPacketStreamResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new mev$protos_shared_pb.Heartbeat;
      reader.readMessage(value,mev$protos_shared_pb.Heartbeat.deserializeBinaryFromReader);
      msg.setHeartbeat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.block_engine.StartExpiringPacketStreamResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.block_engine.StartExpiringPacketStreamResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.block_engine.StartExpiringPacketStreamResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.block_engine.StartExpiringPacketStreamResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeartbeat();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      mev$protos_shared_pb.Heartbeat.serializeBinaryToWriter
    );
  }
};


/**
 * optional shared.Heartbeat heartbeat = 1;
 * @return {?proto.shared.Heartbeat}
 */
proto.block_engine.StartExpiringPacketStreamResponse.prototype.getHeartbeat = function() {
  return /** @type{?proto.shared.Heartbeat} */ (
    jspb.Message.getWrapperField(this, mev$protos_shared_pb.Heartbeat, 1));
};


/**
 * @param {?proto.shared.Heartbeat|undefined} value
 * @return {!proto.block_engine.StartExpiringPacketStreamResponse} returns this
*/
proto.block_engine.StartExpiringPacketStreamResponse.prototype.setHeartbeat = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.block_engine.StartExpiringPacketStreamResponse} returns this
 */
proto.block_engine.StartExpiringPacketStreamResponse.prototype.clearHeartbeat = function() {
  return this.setHeartbeat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.block_engine.StartExpiringPacketStreamResponse.prototype.hasHeartbeat = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.block_engine);
